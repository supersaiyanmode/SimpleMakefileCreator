#!/usr/bin/python

import os,sys
from stat import *
import random
import re

MAKEFILE_TEMPLATE = """
# Define executable name
BIN = %(BIN)s

# Define source files
SRCS = %(SRCS)s

# Define header file paths
INCPATH = %(INCPATH)s

# Define the -L library path(s)
LDFLAGS = %(LDFLAGS)s

# Define the -l library name(s)
LIBS = %(LIBS)s

# Define Compile Flags
COMPILEFLAGS = %(COMPILEFLAGS)s

# Define Link Flags
LINKFLAGS = %(LINKFLAGS)s

# Do not make any changes below!
OBJS      = $(SRCS:.cpp=.o)
CXX       = g++
DEP_FILE  = .depend

.PHONY = all clean distclean


# Main entry point
#
all: depend $(BIN)


# For linking object file(s) to produce the executable
#
$(BIN): $(OBJS)
	@echo Linking $@
	@$(CXX) $(LINKFLAGS) $^ $(LDFLAGS) $(LIBS) -o $@


# For compiling source file(s)
#
.cpp.o:
	@echo Compiling $<
	@$(CXX) -c $(COMPILEFLAGS) $(INCPATH) $< -o $(<:.cpp=.o)


# For cleaning up the project
#
clean:
	$(RM) $(OBJS)

distclean: clean
	$(RM) $(BIN)
	$(RM) $(DEP_FILE)


# For determining source file dependencies
#
depend: $(DEP_FILE)
	@echo "Dependencies generated."
	
$(DEP_FILE):
	@echo Generating dependencies in $@
	@-$(CXX) -E -MM $(COMPILEFLAGS) $(INCPATH) $(SRCS) >> $(DEP_FILE)

ifeq (,$(findstring clean,$(MAKECMDGOALS)))
ifeq (,$(findstring distclean,$(MAKECMDGOALS)))
-include $(DEP_FILE)
endif
endif
"""

class FileNotFoundException(Exception):
    pass

def listFiles(dirName, ext):
    files = []
    for f in os.listdir(dirName):
        filename = os.path.join(dirName,f)
        mode = os.stat(filename).st_mode
        
        if S_ISDIR(mode):
            files += listFiles(filename, ext)
        elif S_ISREG(mode):
            if f.endswith(ext):
                files.append(filename)
    return files

def listCPPFiles(dirName):
    return listFiles(dirName, '.cpp')

def listCFiles(dirName):
    return listFiles(dirName, '.')

def buildMakeFile(sources):
    defines = {
        "BIN": "a.out",
        "INCPATH": "-I./",
        "LDFLAGS": "",
        "LIBS":"",
        "DEFINES": "",
        "COMPILEFLAGS": "-Wall -pedantic",
        "LINKFLAGS": ""
    }
    
    if os.path.isfile('Makefile'):
        with open('Makefile') as f:
            keysToRetain = defines.keys()
            for line in f:
                if (not line.strip().startswith('#')) and '=' in line:
                    parts = line.split('=',1)
                    key = parts[0].strip()
                    if key in keysToRetain:
                        value = parts[1].strip()
                        print "Retaining:", key,"=",value
                        defines[key] = value
            
    defines["SRCS"] = " ".join(sources)
    
    with open('Makefile','w') as f:
        print>>f, MAKEFILE_TEMPLATE%defines
        print "Makefile Generated."
    
def main():
    buildMakeFile(listCPPFiles("."))
    
if __name__ == "__main__":
    main()
    #print listFiles('.','.cpp')
