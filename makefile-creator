#!/usr/bin/python

import os,sys
from stat import *
import random
import re

def listFiles(dirName, ext):
    files = []
    for f in os.listdir(dirName):
        filename = os.path.join(dirName,f)
        mode = os.stat(filename).st_mode
        
        if S_ISDIR(mode):
            files += listFiles(filename, ext)
        elif S_ISREG(mode):
            if f.endswith(ext):
                files.append(filename)
    return files

def listCPPFiles(dirName):
    return [{"filename":f, "compiler":"CPPCOMPILER"} for f in listFiles(dirName, '.cpp')]

def listCFiles(dirName):
    return [{"filename":f, "compiler":"CCOMPILER"} for f in listFiles(dirName, '.c')]

def scanIncludes(line,basePath):
    if not line.startswith("#include"):
        return None
    m = re.search(r'^[ \t]*# *include *["](.*?)["].*',line)
    if not m:
        return None
    return os.path.join(basePath,m.group(1).strip())

def findIncludesRecursive(fileName, foundIncludes=None):
    if foundIncludes is None:
        foundIncludes = []
        
    with open(fileName) as f:
        result = []
        for line in f:
            reRes = re.search(r'^[ \t]*# *include *["](.*?)["].*', line)
            if reRes:
                fullPath = os.path.join(os.path.dirname(fileName), reRes.group(1).strip())
                if fullPath not in foundIncludes:
                    foundIncludes.append(fullPath)
                    result.append(fullPath)
                    result = result + findIncludesRecursive(fullPath, foundIncludes)
        return result

def buildDependencies(sourceFileDescList):
    for i, sourceFileDesc in enumerate(sourceFileDescList):
        fileName = os.path.normpath(sourceFileDesc['filename'])
        sourceFileDesc["filename"] = fileName
        sourceFileDesc["includes"] = map(os.path.normpath, findIncludesRecursive(fileName))
    return sourceFileDescList

def buildMakeFile(sources,params=None):
    params = params or {}
    for x in sources:
        x["objfile"] = x['filename'][:x['filename'].rfind('.')]+".o"
        
    libs = None
    with open('Makefile', 'r') as f:
        line = f.next()
        if line.startswith('LIBS'):
            libs = line.split('=')[1].strip()
    
    f = open('Makefile','w')
    print >>f, "LIBS=" + (libs or "")
    print >>f, "CPPCOMPILER=g++"
    print >>f, "CCOMPILER=gcc"
    print >>f, "COMPILEFLAGS=-Wall -g -O3"
    print >>f, "UNITS=%s"%' '.join(x['objfile'] for x in sources)
    print >>f, ""
    print >>f, "all : $(UNITS)"
    print >>f, "\t$(CPPCOMPILER) $(COMPILEFLAGS) $(UNITS) $(LIBS)"
    for x in sources:
        print >>f, x['objfile'],":", x['filename'],' '.join(x['includes'])
        print x['objfile'], "<-", x['filename'], ' '.join(x['includes'])
        print >>f, "\t$(%s) $(COMPILEFLAGS) -c %s -o %s"%(x['compiler'],x['filename'],x['objfile'])
        print >>f, ""
    print >>f, "clean:"
    print >>f, "\trm -rf $(UNITS)"
    f.close()
    
def main():
    buildMakeFile(buildDependencies(listCPPFiles(".") + listCFiles(".")),{})
    
if __name__ == "__main__":
    main()
    #print listFiles('.','.cpp')
